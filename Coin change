class Solution {
public:// form 1. take or not take, we aare storing ans in meaning.
// using ind in dp for defining state of recursion is an imp aspects of problem solving
    int f(int ind, int T,vector<int>&nums,vector<vector<int>>& dp){// t is the amount to make., ind is index of coins, where higher index is higher denomination
    // base case
        if(ind == 0){
            if(T%nums[0] == 0) return T/nums[0];// number of coin made by smallest possible
                return 1e9;
            
        }
        // save and cache check
        if(dp[ind][T] != -1) return dp[ind][T];
        // save and compute.
        int notTake =  0 + f(ind - 1, T,nums,dp);
        int take = INT_MAX;// if taken we are interested to know can we take me number of coins like this.
        if(nums[ind]<=T){
            take = 1 + f(ind,T - nums[ind],nums,dp);
        }
        return dp[ind][T] = min(take,notTake);// return ing number of coin
    }
    int coinChange(vector<int>& coins, int x) {
        int n = coins.size();
        vector<vector<int>> dp(n,vector<int>(x+1,-1));
        int ans  = f(n-1, x, coins,dp);
        if(ans>=1e9) return -1;
        return ans;
    }
};


// class Solution {
//     // where infinite supply, multiple use statement use, ther is might be funda of taking it, and not moving it.
//     // in 1d array where we are making function we should consider making recurrence on index, in 2d arrya also works
//     // infinite supply pattern--> new patteern
// public:// code riun for one test case.
// // atleast solve for example cases
//     // int f(vector<int> &coins, int x,vector<int>&dp,int &n){
//     //     if(dp[x]!=-1) return dp[x];
//     //     if(dp[x]==INT_MAX) return dp[x] = INT_MAX;
//     //     int mini = INT_MAX;// if cant be found
//     //     // [x - coins[i]]
//     //     for(int i = 0;i<n;i++){
//     //         if(x-coins[i]>0){
//     //             int t = f(coins,x-coins[i],dp,n);
//     //             if(t != INT_MAX){
//     //                  mini =min(mini , 1 + f(coins,x-coins[i],dp,n));
//     //             }
                
//     //         }
//     //     }
//     //     if(mini == INT_MAX) return dp[x] = INT_MAX;
//     //     return dp[x] = mini;
//     // }
// // edge cases socha , 
// // I am going to build an dp array , which keep track of the result to calculate the ans.
//     int coinChange(vector<int>& coins, int x) {
      
//     }
// };

/* attemp 1
    int coinChange(vector<int>& coins, int x) {
        // int n = coins.size();
        // if(x==0 ) return 0;
        // // if(x<coins[0]) return -1;
        // vector<int> dp(x+1,x+1);
        // for(int i = 0;i<n;i++){
        //     dp[coins[i]] = 1;
        // }
        // int ans = f(coins,x,dp,n);
        // return ans==INT_MAX?-1:ans;
    }
    */
