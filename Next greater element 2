class Solution {
public:
// 
// vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
//         unordered_map<int, int> mp;// nums[j], next greater
//         int b = nums2.size();
//         mp[nums2[b-1]] = -1;
//         stack<int> st; // keep track of next greater element appear
//         st.push(nums2[b - 1]);
//         for(int i = b - 2; i>= 0; i--){
//              while(!st.empty() && nums2[i] >= st.top()) st.pop();// pop

//              if(st.empty()){
//                 mp[nums2[i]] = -1;// ans
//              }else{
//                 mp[nums2[i]] = st.top();
//              }

//              st.push(nums2[i]);// push
//         }
//         vector<int>ans;
//         for(int i = 0; i<nums1.size(); i++){
//             // if(mp.find(nums1[i]) == mp.end()){
//             //     ans.push_back(-1);
//             // }else{
//                 ans.push_back(mp[nums1[i]]);
//             // }
//         }
//         return ans;
//     }
// };
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n = nums.size();
        vector<int>ans(n,1e9 + 5);
        
        stack<int> st; // keep track of next greater element appear
        st.push(nums[n - 1]);
        for(int i = 2*n - 2; i>= 0; i--){// could be easiluy written within single for loop 
             while(!st.empty() && nums[i % n] >= st.top()) st.pop();// pop

             if(st.empty()){
                ans[i%n%n] = -1;// ans
             }else{
                ans[i%n] = st.top();
             }

             st.push(nums[i%n]);// push

              if(i < n && ans[i] == 1e9 + 5 ) ans[i] = -1;// condition for the max number

        }
        // for(int i = n - 1; i>= 0; i--){
        //      while(!st.empty() && nums[i] >= st.top()) st.pop();// pop

        //      if(st.empty()){
        //         ans[i] = -1;// ans
        //      }else{
        //         ans[i] = st.top();
        //      }

        //      st.push(nums[i]);// push

        //      if(ans[i] == 1e9 + 5) ans[i] = -1;// condition for the max number
        // }

        return ans;
        
        
    }
};
