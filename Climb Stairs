class Solution {
public:
    vector<int> dp;
    int helper(int n){
        if(n == 1 || n == 2) return n;
        if(dp[n]!=-1) return dp[n];
        return dp[n] = helper(n-1) + helper(n-2);
    }
    // bottom up , build from 1 and 2 using , also could be space optimised.
    int climbStairs(int n) {
        dp.clear();
        dp.resize(n+1,-1);// n+1 is important because creating n size leaves no sapce for storing the result of nth dp value;
        return helper(n);
        
    }
};
