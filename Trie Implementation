class Node{
public:
char data;
bool terminal;
unordered_map< char , Node*> children;

    Node(char data){
        this->data = data;
        this->terminal = false;
    }
    void makeTerminal(){
        this->terminal = true;
    }


};


class Trie {
    Node* root;
public:
    Trie() {
        root = new Node('\0');
    }
    
    void insert(string word) {
        Node* curr = root;
        for(int i = 0; i< word.size() ; i++){
            char ch = word[i];// curr character to be inserted
            if(curr->children.count(ch)){
                curr = curr->children[ch];
            }else{
                Node* child = new Node(ch);
                curr->children[ch] = child;
                curr = child;
            }
        }
        curr->makeTerminal();// making terminal;
        
    }
    
    bool search(string word) {
        Node* curr = root;
        for(int i = 0; i< word.size() ; i++){
            char ch = word[i];// curr character to be inserted
            if(curr->children.count(ch)){
                curr = curr->children[ch];
            }else{
                return false;
            }
        }
        return curr->terminal;// making terminal;
    }

    
    bool startsWith(string prefix) {
        Node* curr = root;
        for(int i = 0; i< prefix.size() ; i++){
            char ch = prefix[i];// curr character to be inserted
            if(curr->children.count(ch)){
                curr = curr->children[ch];
            }else{
                return false;
            }
        }
        return true;// as for prefix we need not to check tht it is terminal or not.
        
    }
    
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
