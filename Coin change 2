class Solution {
public:
// solved by self , I need more such kind of practice.
int dp[5001][305];// no of ways  to make i , from jth index or onward.
// int ans = 0;
    int rec(int A, int idx, vector<int> &coins){
        if(A < 0 || idx == coins.size()) return 0;// pruning
        if(A == 0) return 1;// base case

        // cache check
        if(dp[A][idx] != -1){
            return dp[A][idx];
        }
        // compute 
        // take
        int res = 0;
        res += rec(A - coins[idx], idx , coins);
        // not take , means take next
        res += rec(A , idx + 1, coins );
        // ans += res;
        dp[A][idx] = res;
        return res;

    }    

    int change(int A, vector<int>& coins) {
        memset(dp, -1 , sizeof(dp));
        return rec(A, 0 , coins);
    }
};
