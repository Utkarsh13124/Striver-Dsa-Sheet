class Solution {
  public:
    int prec(char c){
        if(c == '^') return 3;
        // here they are note to avoid right associativity of it , otherwise we need to take care when top and scanned char ^ both are same , then we need to put right that is scanned into string, in other cases left associativity follow.
        else if (c == '/' || c == '*')
        return 2;
        else if (c == '+' || c == '-')
        return 1;
        else
        return -1;
 }
    // Function to convert an infix expression to a postfix expression.
    string infixToPostfix(string s) {
        // Your code here
        string result = "";
        stack<char> st;
        
        for(int i = 0; i < s.size(); i++){
            char c = s[i];
            
            // if the sccanned character is an operand , add it to output string
            if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
             result += c;
             
                // If the scanned character is an
                // ‘(‘, push it to the stack.
            else if (c == '(')
              st.push('(');
              
            // If the scanned character is an ‘)’,
            // pop and to output string from the stack
            // until an ‘(‘ is encountered.
            else if (c == ')') {
              while (st.top() != '(') {
                result += st.top();
                st.pop();
              }
              st.pop();
            }
            
            //If an operator is scanned
            else {
              while (!st.empty() && prec(s[i]) <= prec(st.top())) {
                result += st.top();
                st.pop();
              }
              st.push(c);// pushing the current char after popping out .
            }
        }
        
        // pop all the remaining element from stack and add it into result
        while (!st.empty()) {
            result += st.top();
            st.pop();
          }
        
        return result;
    }
};
