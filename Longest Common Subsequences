class Solution {
public:
// saw by watching video
// its a new variety of dp in string.
// i learnt how he created a 2d grid to keep track of dp, 
// approach to peeche se aage jaate hue hi, 
// generally , humhe peeche jaate hue ya aage aate hue kuch optimisation krna hota hi

// its optimisation also exist usko bhi krna hi.
    int f(int i, int j, string& s, string& t, vector<vector<int>>& dp) {
        if (i < 0 || j < 0)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        if (s[i] == t[j])
            return dp[i][j] = 1 + f(i - 1, j - 1, s, t, dp);// take the term and reducing both idx
        return dp[i][j] = max(f(i-1,j,s,t,dp),f(i,j-1,s,t,dp));// not take the term and looking out the best by leaving ith , at a time and jth at a time.
    }
    int longestCommonSubsequence(string s, string t) {
        int n = s.size();
        int m = t.size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        return f(n - 1, m - 1, s, t,dp);
    }
};
