class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size()-1;
        int mid;
        while(low <= high){// when it is on equal then iit will also search the condition of left and right at same place
            int mid = low + (high - low)/2;
            cout<<mid<<" ";
            if(nums[mid] == target) return 1;
            else if(nums[mid] < target) low = mid + 1;
            else high = mid - 1;
        }
        return 0;
    }
// binary search look for search space , and if you can divide it in half by some means , 
    bool searchMatrix(vector<vector<int>>& mat, int k) {
        int n = mat.size() * mat[0].size();
        int left = 0, right = n - 1 , mid;
        while(left <= right ){
            mid = (left + right)/2;
            cout << left <<" "<< mid << " " << right << endl;
            int r = mid/mat[0].size();
            int c = mid % mat[0].size();
            if(k == mat[r][c]){
                return true;
            } else if(k < mat[r][c]){
                right = mid - 1;
            }else{
                left = mid + 1;
            }
            cout << left <<" "<< mid << " " << right << endl <<endl;
        }
        return false;
    }
};
