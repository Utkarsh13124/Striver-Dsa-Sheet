class Solution {
    private:
     bool dfs(int node,int par,vector<int> adj[],vector<int> &vis){
         vis[node] = 1;
         for(auto it : adj[node]){
             if(!vis[it]){
                 vis[it] = 1;
                 if(dfs(it,node,adj,vis)) return true;
             }
             else if(it!=par) {
                //  cout<<it<<" "<<node<<" "<<par<<endl;
                 return true;// cycle found
             }
         }
         return false;
     }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int v, vector<int> adj[]) {
        // Code here
        vector<int> vis(v,0);
        for(int i = 0;i<v;i++){
            if(!vis[i]){
                if(dfs(i,-1,adj,vis)) return true;
            }
        }
        // cout<<endl;
        return false;
    }
};
